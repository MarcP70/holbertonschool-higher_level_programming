>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> BaseGeometry().integer_validator("my_int", 12)

>>> BaseGeometry().integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> BaseGeometry().integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> BaseGeometry().integer_validator("age", )
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> BaseGeometry().integer_validator(, 4)
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> BaseGeometry().integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> BaseGeometry().integer_validator(None)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> BaseGeometry().integer_validator(None, None)
Traceback (most recent call last):
TypeError: None must be an integer

>>> print(BaseGeometry().area())
Traceback (most recent call last):
Exception: area() is not implemented

>>> BaseGeometry().integer_validator("test", float('inf'))
Traceback (most recent call last):
TypeError: test must be an integer

>>> BaseGeometry().integer_validator("test", float('nan'))
Traceback (most recent call last):
TypeError: test must be an integer

>>> BaseGeometry().integer_validator("test", float(4))
Traceback (most recent call last):
TypeError: test must be an integer

>>> BaseGeometry().integer_validator(4, 4)

>>> BaseGeometry().integer_validator("name", [4])
Traceback (most recent call last):
TypeError: name must be an integer

>>> BaseGeometry().integer_validator("name", (2, 3))
Traceback (most recent call last):
TypeError: name must be an integer

>>> BaseGeometry().integer_validator("name", {"test": 3})
Traceback (most recent call last):
TypeError: name must be an integer

>>> BaseGeometry().integer_validator("name", int)
Traceback (most recent call last):
TypeError: name must be an integer

>>> BaseGeometry().integer_validator("name", ())
Traceback (most recent call last):
TypeError: name must be an integer

>>> BaseGeometry().integer_validator("name", {})
Traceback (most recent call last):
TypeError: name must be an integer


>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> print(bg.area())
Traceback (most recent call last):
Exception: area() is not implemented
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0
>>> bg.integer_validator("name", "")
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
TypeError: distance must be an integer
>>> bg.integer_validator("name", 4.2)
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("name", )
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator("name", float('inf'))
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("name", float('nan'))
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("name", (1, 2, 3))
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("name", [1, 2, 3])
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("name", {1, 2, 3})
Traceback (most recent call last):
TypeError: name must be an integer
>>> bg.integer_validator("name", {"a": "1", "b": "2", "c": "3"})
Traceback (most recent call last):
TypeError: name must be an integer
